//
// Copyright @E-MetroTel 2015
//
(function() {

  const mscs = {debug: true}
  const transducer_handset = 0
  const transducer_headset = 1
  const transducer_handsfree = 2
  const transducer_all_pairs = 0x3f

  let current_device = ""
  let installed_devices = []

  let transducer_tx = 0;
  let transducer_rx = 0;

  let vol_chg = 1
  var active_audio_ctrl
  var webrtc = null

  function get_installed_devices() { return installed_devices }

  let DeviceManager = {
    debug: true,
    devices: {
      handsfree_input_id: "",
      handsfree_output_id: "",
      headset_input_id: "",
      headset_output_id: "",
      current_device: ""
    },
    active_audio_ctrl: $('#audio-alerting')[0],
    set_webrtc: function(web_rtc) {
      this.webrtc = web_rtc
    },
    update_transducer: function() {
      let tx = transducer_tx
      let rx = transducer_rx
      if (tx) this.connect_transducer_tx(tx.stream_id, tx.pair_id, tx.apb)
      if (rx) this.connect_transducer_rx(rx.stream_id, rx.pair_id, rx.apb)
    },

    get_device: function(dev) {
      return this.devices[dev]
    },
    get_devices: function() {
      return { devices: this.devices, current_device: this.devices.current_device }
    },
    set_devices: function(devs) {
      if (this.debug) console.log("set_devices", devs)

      set_devices_id(devs, installed_devices, "handsfree_input_id", "default")
      set_devices_id(devs, installed_devices, "handsfree_output_id", "default")
      set_devices_id(devs, installed_devices, "headset_input_id", "")
      set_devices_id(devs, installed_devices, "headset_output_id", "")
    },
    set_devices_id: function(devs, installed, type, the_default) {
      if (installed[devs[type]])
        this.devices[type] = devs[type]
      else
        this.devices[type] = the_default
    },
    has_headset_device: function() {
      var status = false;
      if(this.devices.headset_input_id && this.devices.headset_output_id)
        status = true;
      return status;
    },
    enumerateDevices: function() {
      // navigator.mediaDevices.enumerateDevices()
      // .then(DeviceManager.saveDevices)
      // .catch(DeviceManager.errorCallback)
    },
    saveDevices: function(deviceInfos) {
      if (DeviceManager.debug) console.log('deviceInfos', deviceInfos)
      DeviceManager.installed_devices = []
      let devices = []
      for (var i = 0; i !== deviceInfos.length; ++i) {
        let device = deviceInfos[i]
        if (device.kind === 'audioinput' || device.kind === "audiooutput") {
          DeviceManager.Manager.installed_devices[device.deviceId] = device
          DeviceManager.devices.push({kind: device.kind, label: device.label, id: device.deviceId})
        } else {
          console.log('---------- other device', device)
        }
      }
      UccChat.installed_devices = devices
      if (DeviceManager.debug) console.log('installed_devices', devices)
    },

    load_devices: function() {
      if (DeviceManager.debug) console.log("load_devices()")
      navigator.mediaDevices.enumerateDevices()
      .then(DeviceManager.gotDevices)
      .catch(DeviceManager.errorCallback)
    },

    get_current_device: function() {
      return this.devices.current_device;
    },

    connect_transducer: function(msg) {
      // TODO: this needs to be moved
      var audio_ctrl = $('#audio')
      DeviceManager.set_active_apb(msg.apb_number)
      if (msg.tx_enable)
        DeviceManager.connect_transducer_tx(msg.key, msg.pair_id, msg.apb_number)
      if (msg.rx_enable)
        DeviceManager.connect_transducer_rx(msg.key, msg.pair_id, msg.apb_number)
      DeviceManger.handle_call_on_hold(msg, audio_ctrl)
    },

    alerting_tone_configuration: function(msg) {
      switch(msg.transducer_routing) {
        case transducer_headset:
        case transducer_handset:
          // alerting.set_headset_output()
          DeviceManager.setSinkId($('#audio-alerting'), DeviceManager.devices.headset_output_id)
          break;
        case transducer_handsfree:
          DeviceManager.setSinkId($('#audio-alerting'), DeviceManager.devices.handsfree_output_id)
          break;
        case transducer_all_pairs:
          break;
        default:
          console.error('Invalid alerting_tone_configuration transducer_routing', msg)
          break;
      }
    },
    transducer_tone_volume: function(msg) {
      switch(msg.key) {
        case "alerting":
        case "special":
          DeviceManager.set_tone_volume(msg.tone_level, msg.key);
          break;
        default:
          console.error('Unknown transducer tone', msg.key)
          break;
      }
    },
    set_tone_volume: function(level, key) {
      var tone_volume = 0;
      switch(key) {
        case "alerting":
          tone_volume = alerting.get_vol_step_factor();
          break;
        case "special":
          tone_volume = sptone.get_vol_step_factor();
          break;
        case "paging":
          tone_volume = paging.get_vol_step_factor();
          break;
        default:
          console.error('Unknown transducer tone', key)
          break;
      }
      if (level > 8) level = 8
      if (level < 1) level = 1
      let new_volume = tone_volume;
      if (level > 0)
        new_volume = level * tone_volume;
      if (DeviceManager.debug)
        console.log('set_tone_volume', key, level, new_volume)
      DeviceManager.active_audio_ctrl.volume = new_volume
    },

    get_audio_ctrl_volume: function() {
      return DeviceManager.active_audio_ctrl.volume;
    },
    play: function(audio_control, tone_file) {
      if (DeviceManager.debug)
        console.log("Media player playing tone:", tone_file)
      DeviceManager.audio_control.attr('src', tone_file)
      if (DeviceManager.debug)
        console.log("Media player playing tone with audio control:", audio_control)
      audio_control[0].play()
    },
    setSinkId: function(audio_control, sinkId) {
      let element = audio_control[0]
      if (sinkId) {
        if (typeof element.sinkId != 'undefined') {
          element.setSinkId(sinkId)
          .then(function() {
            if (DeviceManager.debug)
              console.log('Success, audio output device attached', sinkId)
          })
          .catch(function(error) {
            var errorMessage = error;
            if (error.name === 'SecurityError') {
              errorMessage = 'You need to use HTTPS for selecting audio output ' +
                'device: ' + error
            }
          });
        } else {
          console.error("Browser does not support output device selection.")
        }
      } else {
        if (DeviceManager.debug)
          console.log('Ignoring setSinkId for no sinkId', sinkId)
      }
    },
    stop: function(audio_control) {
      audio_control[0].pause()
      audio_control.attr('src','')
    },
    volume_up: function(active_audio_ctrl) {
    },
    volume_down: function(active_audio_ctrl) {
    },
    get_rx_volume_parms: function(msg) {
    },
    set_volume_level: function(active_audio_ctrl, apb, level) {
    },
    set_mute_state: function(msg) {
      switch (msg.key) {
        case 0:
          if(msg.mute) {
            DeviceManager.webrtc.stop_transducer(DeviceManager.transducer_tx.pair_id)
          }
          else {
            DeviceManager.webrtc.set_transducer(DeviceManager.transducer_tx.pair_id)
          }
          break;
        default:
          console.error("Unsupported stream_id:", msg.key)
      }
    },
    gotDevices: function(deviceInfos) {
    },
    errorCallback: function(error) {
      console.error('Device Manager Error: ', error)
    },
    connect_transducer_tx: function(stream_id, pair_id, apb) {
      if (stream_id == 0) {
        let transducer_tx = {stream_id: stream_id, pair_id: pair_id, apb: apb}
        switch(pair_id) {
          case transducer_headset:
            if (DeviceManager.devices.headset_output_id) {
              DeviceManager.setSinkId($('#audio'), DeviceManager.devices.headset_output_id)
              DeviceManager.setSinkId($('#audio-stream'), DeviceManager.devices.headset_output_id)
              DeviceManager.setSinkId($('#audio-keypad'), DeviceManager.devices.headset_output_id)
            }
            break;
          case transducer_handsfree:
            if (DeviceManager.devices.handsfree_output_id) {
              DeviceManager.setSinkId($('#audio'), DeviceManager.devices.handsfree_output_id)
              DeviceManager.setSinkId($('#audio-stream'), DeviceManager.devices.handsfree_output_id)
              DeviceManager.setSinkId($('#audio-keypad'), DeviceManager.devices.handsfree_output_id)
            }
            break;
          default:
            console.error("Invalid tx pair_id", pair_id)
        }
      } else if (stream_id == 255) {
        if (mscs.debug) console.log("disconnect tx streams")
        DeviceManager.webrtc.stop_transducer(pair_id)
      } else {
        console.warn("connect_transducer tx - unknown stream ID", stream_id)
      }
      DeviceManager.transducer_tx = transducer_tx;
    },
    connect_transducer_rx: function(stream_id, pair_id, apb) {
      if (stream_id == 0) {
        let transducer_rx = {stream_id: stream_id, pair_id: pair_id, apb: apb}
        switch(pair_id) {
          case transducer_headset:
            DeviceManager.current_device = DeviceManager.devices.headset_input_id
            DeviceManager.webrtc.set_transducer(pair_id)
            break;
          case transducer_handsfree:
            DeviceManager.current_device = DeviceManager.devices.handsfree_input_id
            DeviceManager.webrtc.set_transducer(pair_id)
            break;
          default:
            console.warn("Invalid tx pair_id", pair_id)
        }
      } else if (stream_id == 255) {
        if (DeviceManager.debug) console.log("disconnect rx streams", pair_id)
        DeviceManager.webrtc.stop_transducer(pair_id)
      } else {
        console.warn("connect_transducer rx - unknown stream ID", stream_id)
      }
      DeviceManager.transducer_rx = transducer_rx;
    },
    handle_call_on_hold: function(msg, audio_ctrl) {
      if (audio_ctrl.attr('src')) {
        if (msg.key == 0) {
          audio_ctrl[0].play()
        }
        else if (msg.key == 255) {
          audio_ctrl[0].pause()
        }
      }
    }
  }
})();
